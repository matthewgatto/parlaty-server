def get_actions(myactions)
	myactions.map do |myaction|
	{
		id: myaction.id,
		name: myaction.name,
		parameter_name: myaction.parameter_name,
		parameter_value_8_pack: myaction.parameter_value_8_pack,
		mode: myaction.mode,
		time: myaction.time
	}
	end
end

def show_action_copy(actionCopy)
	if actionCopy
	{
		id: actionCopy.id,
		parameter_value_8_pack: actionCopy.parameter_value_8_pack,
		step_id: actionCopy.step_id,
		action_id: actionCopy.action_id,
		mode: actionCopy.mode,
		time: actionCopy.time
	}
	else
	  nil
	end
end

def get_actions2(myactions, step_id)
	myactions.map do |myaction|
	# if an actions parameter value is changed in the ui
	# an action copy is created to store the value
	# so that the original value is retained
	actionCopy = ActionCopy.find_by(step_id: step_id, action_id: myaction.id)
	{
		id: myaction.id,
		name: myaction.name,
		parameter_name: myaction.parameter_name,
		parameter_value_8_pack: myaction.parameter_value_8_pack,
		mode: myaction.mode,
		time: myaction.time,
		action_copy: show_action_copy(actionCopy)
	}
	end
end

def show_devices(mydevices)
	mydevices.map do |mydevice|
	{
		id: mydevice.id,
		name: mydevice.name,
		default: mydevice.default,
		oem_business_id: mydevice.oem_business_id,
		procedure_id: mydevice.procedure_id,
		actions_order: mydevice.actions_order,
		actions: get_actions(mydevice.actions)
	}
	end
end

json = {
	procedure_id: @procedure.id,
	name: @procedure.name,
	oem_business_id: @procedure.oem_business_id,
	version: @procedure.version,
	description: @procedure.description,
	category: @procedure.category,
	author: @procedure.author,
	language: @procedure.language,
	steps_order: @procedure.steps_order,
	devices: show_devices(@procedure.devices)
}

def visual_check(step)
	if (step.has_visual)
    	url_for(step.visuals.first)
	else
    	nil
	end
end

def get_device(device_id, step_id)
	if (device_id)
		mydevice = Device.find(device_id)
		{
			id: mydevice.id,
			name: mydevice.name,
			default: mydevice.default,
			oem_business_id: mydevice.oem_business_id,
			procedure_id: mydevice.procedure_id,
			actions_order: mydevice.actions_order,
			actions: get_actions2(mydevice.actions, step_id)
		}
	else
		nil
	end
end

json[:steps] = @steps.map do |step|
{
  id: step.id,
  title: step.title,
  location: step.location,
  safety: step.safety,
  spoken: step.spoken,
  note: step.note,
  visual: visual_check(step),
  mode: step.mode,
  time: step.time,
  device: get_device(step.device_id, step.id)
}
end

json
