{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createStepSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createProcedureSaga),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(procedureSagas);\n\nimport { takeEvery, put, call, select } from 'redux-saga/effects';\nimport { setFormErrors } from '../store/form';\nimport { ADD_STEP_REQUEST, ADD_STEP_REQUEST__SUCCESS, ADD_STEP_REQUEST__FAILURE, CREATE_PROCEDURE_REQUEST, CREATE_PROCEDURE_REQUEST__SUCCESS, CREATE_PROCEDURE_REQUEST__FAILURE } from '../store/procedure';\n\nvar getFormValues = function getFormValues(_ref) {\n  var form = _ref.form;\n  return form;\n};\n\nvar checkIfProcedureHasSteps = function checkIfProcedureHasSteps(_ref2) {\n  var procedure = _ref2.procedure;\n  return procedure.steps.length ? true : false;\n};\n\nfunction readAsDataURL(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      return resolve(e.target.result);\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nfunction validateStepValues(_ref3) {\n  var title = _ref3.title,\n      location = _ref3.location,\n      parameter = _ref3.parameter;\n  var errors = {};\n\n  if (!title || !title.length) {\n    errors.title = true;\n  }\n\n  if (!location || !location.length) {\n    errors.location = true;\n  }\n\n  if (!parameter || !parameter.length) {\n    errors.parameter = true;\n  }\n\n  return Object.keys(errors).length > 0 ? errors : null;\n}\n\nfunction createStepSaga(_ref4) {\n  var payload, _ref5, step, errors, image;\n\n  return _regeneratorRuntime.wrap(function createStepSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref4.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return select(getFormValues);\n\n        case 4:\n          _ref5 = _context.sent;\n          step = _ref5.step;\n          errors = validateStepValues(step.values);\n\n          if (errors) {\n            _context.next = 17;\n            break;\n          }\n\n          if (!step.values.image) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 11;\n          return call(readAsDataURL, step.values.image);\n\n        case 11:\n          image = _context.sent;\n          step.values.src = image;\n\n        case 13:\n          _context.next = 15;\n          return put({\n            type: ADD_STEP_REQUEST__SUCCESS,\n            payload: {\n              step: step.values\n            }\n          });\n\n        case 15:\n          _context.next = 19;\n          break;\n\n        case 17:\n          _context.next = 19;\n          return put(setFormErrors({\n            form: 'step',\n            inputErrors: errors\n          }));\n\n        case 19:\n          _context.next = 24;\n          break;\n\n        case 21:\n          _context.prev = 21;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(\"ERROR\", _context.t0);\n\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 21]]);\n}\n\nfunction validateProcedureValues(_ref6) {\n  var title = _ref6.title,\n      description = _ref6.description;\n  var errors = {};\n\n  if (!title || !title.length) {\n    errors.title = true;\n  }\n\n  if (!description || !description.length) {\n    errors.description = true;\n  }\n\n  return Object.keys(errors).length > 0 ? errors : null;\n}\n\nfunction createProcedureSaga(_ref7) {\n  var payload, procedureHasSteps, _ref8, procedure, errors;\n\n  return _regeneratorRuntime.wrap(function createProcedureSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref7.payload;\n          _context2.prev = 1;\n          console.log(\"HELLO\");\n          _context2.next = 5;\n          return select(checkIfProcedureHasSteps);\n\n        case 5:\n          procedureHasSteps = _context2.sent;\n\n          if (!procedureHasSteps) {\n            _context2.next = 18;\n            break;\n          }\n\n          _context2.next = 9;\n          return select(getFormValues);\n\n        case 9:\n          _ref8 = _context2.sent;\n          procedure = _ref8.procedure;\n          errors = validateProcedureValues(procedure.values);\n\n          if (errors) {\n            _context2.next = 16;\n            break;\n          }\n\n          alert('PROCEDURE CREATED');\n          _context2.next = 18;\n          break;\n\n        case 16:\n          _context2.next = 18;\n          return put(setFormErrors({\n            form: 'procedure',\n            inputErrors: errors\n          }));\n\n        case 18:\n          _context2.next = 23;\n          break;\n\n        case 20:\n          _context2.prev = 20;\n          _context2.t0 = _context2[\"catch\"](1);\n          console.log(\"ERROR\", _context2.t0);\n\n        case 23:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 20]]);\n}\n\nexport default function procedureSagas() {\n  return _regeneratorRuntime.wrap(function procedureSagas$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(ADD_STEP_REQUEST, createStepSaga);\n\n        case 2:\n          _context3.next = 4;\n          return takeEvery(CREATE_PROCEDURE_REQUEST, createProcedureSaga);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:\\Users\\Jake\\Documents\\Repositories\\parlaty\\app\\javascript\\src\\sagas\\procedure.js"],"names":["createStepSaga","createProcedureSaga","procedureSagas","takeEvery","put","call","select","setFormErrors","ADD_STEP_REQUEST","ADD_STEP_REQUEST__SUCCESS","ADD_STEP_REQUEST__FAILURE","CREATE_PROCEDURE_REQUEST","CREATE_PROCEDURE_REQUEST__SUCCESS","CREATE_PROCEDURE_REQUEST__FAILURE","getFormValues","form","checkIfProcedureHasSteps","procedure","steps","length","readAsDataURL","blob","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","validateStepValues","title","location","parameter","errors","Object","keys","payload","step","values","image","src","type","inputErrors","console","log","validateProcedureValues","description","procedureHasSteps","alert"],"mappings":"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","sourcesContent":["import { takeEvery, put, call, select } from 'redux-saga/effects';\r\nimport { setFormErrors } from '../store/form';\r\nimport {\r\n  ADD_STEP_REQUEST,\r\n  ADD_STEP_REQUEST__SUCCESS,\r\n  ADD_STEP_REQUEST__FAILURE,\r\n  CREATE_PROCEDURE_REQUEST,\r\n  CREATE_PROCEDURE_REQUEST__SUCCESS,\r\n  CREATE_PROCEDURE_REQUEST__FAILURE\r\n} from '../store/procedure';\r\n\r\nconst getFormValues = ({form}) => form\r\nconst checkIfProcedureHasSteps = ({procedure}) => procedure.steps.length ? true : false;\r\n\r\nfunction readAsDataURL(blob) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader  = new FileReader();\r\n    reader.onload = (e) => resolve(e.target.result)\r\n    reader.onerror = reject\r\n    reader.readAsDataURL(blob)\r\n  })\r\n}\r\n\r\nfunction validateStepValues({title, location, parameter}){\r\n  let errors = {}\r\n  if(!title || !title.length){\r\n    errors.title = true;\r\n  }\r\n  if(!location || !location.length){\r\n    errors.location = true;\r\n  }\r\n  if(!parameter || !parameter.length){\r\n    errors.parameter = true;\r\n  }\r\n  return Object.keys(errors).length > 0 ? errors : null\r\n}\r\n\r\nfunction* createStepSaga({payload}){\r\n  try {\r\n    let { step } = yield select(getFormValues);\r\n    let errors = validateStepValues(step.values);\r\n    if(!errors){\r\n      if(step.values.image){\r\n        const image = yield call(readAsDataURL, step.values.image)\r\n        step.values.src = image;\r\n      }\r\n      yield put({type: ADD_STEP_REQUEST__SUCCESS, payload: {step: step.values}})\r\n    } else {\r\n      yield put(setFormErrors({form: 'step', inputErrors: errors}))\r\n    }\r\n  } catch (e) {\r\n    console.log(\"ERROR\", e);\r\n  }\r\n}\r\n\r\nfunction validateProcedureValues({title, description}){\r\n  let errors = {}\r\n  if(!title || !title.length){\r\n    errors.title = true;\r\n  }\r\n  if(!description || !description.length){\r\n    errors.description = true;\r\n  }\r\n  return Object.keys(errors).length > 0 ? errors : null\r\n}\r\n\r\nfunction* createProcedureSaga({payload}){\r\n  try {\r\n    console.log(\"HELLO\");\r\n    let procedureHasSteps = yield select(checkIfProcedureHasSteps);\r\n    if(procedureHasSteps){\r\n      let { procedure } = yield select(getFormValues);\r\n      let errors = validateProcedureValues(procedure.values);\r\n      if(!errors){\r\n        alert('PROCEDURE CREATED')\r\n      } else {\r\n        yield put(setFormErrors({form: 'procedure', inputErrors: errors}))\r\n      }\r\n    }\r\n\r\n  } catch (e) {\r\n    console.log(\"ERROR\", e);\r\n  }\r\n}\r\nexport default function* procedureSagas() {\r\n  yield takeEvery(ADD_STEP_REQUEST, createStepSaga);\r\n  yield takeEvery(CREATE_PROCEDURE_REQUEST, createProcedureSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}