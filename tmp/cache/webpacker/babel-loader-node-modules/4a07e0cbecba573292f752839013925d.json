{"ast":null,"code":"function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { connect } from 'react-redux';\nimport ProcedureImages from '../components/ProcedureImages';\nexport default connect(function (_ref) {\n  var procedure = _ref.procedure;\n  var images = [];\n\n  for (var i = 0; i < procedure.steps.length; i++) {\n    var step = procedure.steps[i];\n\n    if (step.visuals && step.visuals.length) {\n      images = [].concat(_toConsumableArray(images), _toConsumableArray(step.visuals));\n    }\n  }\n\n  return {\n    images: images\n  };\n})(ProcedureImages);","map":{"version":3,"sources":["C:\\Users\\Jake\\Documents\\Repositories\\parlaty\\app\\javascript\\src\\containers\\ProcedureImages.js"],"names":["connect","ProcedureImages","procedure","images","i","steps","length","step","visuals"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,+BAA5B;AAEA,eAAeD,OAAO,CACpB,gBAAiB;AAAA,MAAfE,SAAe,QAAfA,SAAe;AACf,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,KAAV,CAAgBC,MAApC,EAA4CF,CAAC,EAA7C,EAAiD;AAC/C,QAAIG,IAAI,GAAGL,SAAS,CAACG,KAAV,CAAgBD,CAAhB,CAAX;;AACA,QAAGG,IAAI,CAACC,OAAL,IAAgBD,IAAI,CAACC,OAAL,CAAaF,MAAhC,EAAuC;AACrCH,MAAAA,MAAM,gCAAOA,MAAP,sBAAkBI,IAAI,CAACC,OAAvB,EAAN;AACD;AACF;;AACD,SAAQ;AAACL,IAAAA,MAAM,EAANA;AAAD,GAAR;AACD,CAVmB,CAAP,CAWbF,eAXa,CAAf","sourcesContent":["import { connect } from 'react-redux'\r\nimport ProcedureImages from '../components/ProcedureImages';\r\n\r\nexport default connect(\r\n  ({procedure}) => {\r\n    let images = []\r\n    for (var i = 0; i < procedure.steps.length; i++) {\r\n      let step = procedure.steps[i]\r\n      if(step.visuals && step.visuals.length){\r\n        images = [...images, ...step.visuals]\r\n      }\r\n    }\r\n    return ({images})\r\n  }\r\n)(ProcedureImages)\r\n"]},"metadata":{},"sourceType":"module"}