{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createStepSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(procedureSagas);\n\nimport { takeEvery, put, call, select } from 'redux-saga/effects';\n\nvar getFormValues = function getFormValues(_ref) {\n  var form = _ref.form;\n  return form;\n};\n\nfunction createStepSaga(_ref2) {\n  var payload, _ref3, step;\n\n  return _regeneratorRuntime.wrap(function createStepSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return select(getFormValues);\n\n        case 4:\n          _ref3 = _context.sent;\n          step = _ref3.step;\n          console.log(\"step\", step);\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          alert('Error');\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nexport default function procedureSagas() {\n  return _regeneratorRuntime.wrap(function procedureSagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(\"ADD_STEP_REQUEST\", createStepSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Users\\Jake\\Documents\\Repositories\\parlaty\\app\\javascript\\src\\sagas\\procedure.js"],"names":["createStepSaga","procedureSagas","takeEvery","put","call","select","getFormValues","form","payload","step","console","log","alert"],"mappings":";;;;yBAIUA,c;;;yBAQeC,c;;AAZzB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA6C,oBAA7C;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,SAAYA,IAAZ;AAAA,CAAtB;;AAEA,SAAUP,cAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA0BQ,UAAAA,OAA1B,SAA0BA,OAA1B;AAAA;AAAA;AAEmB,iBAAMH,MAAM,CAACC,aAAD,CAAZ;;AAFnB;AAAA;AAEUG,UAAAA,IAFV,SAEUA,IAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AAHJ;AAAA;;AAAA;AAAA;AAAA;AAKIG,UAAAA,KAAK,CAAC,OAAD,CAAL;;AALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,eAAe,SAAUX,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,SAAS,CAAC,kBAAD,EAAqBF,cAArB,CAAf;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call, select } from 'redux-saga/effects';\r\n\r\nconst getFormValues = ({form}) => form\r\n\r\nfunction* createStepSaga({payload}){\r\n  try {\r\n    let { step } = yield select(getFormValues);\r\n    console.log(\"step\", step);\r\n  } catch (e) {\r\n    alert('Error')\r\n  }\r\n}\r\nexport default function* procedureSagas() {\r\n  yield takeEvery(\"ADD_STEP_REQUEST\", createStepSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}