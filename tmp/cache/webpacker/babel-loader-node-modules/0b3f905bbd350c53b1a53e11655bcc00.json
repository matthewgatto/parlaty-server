{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(createStepSaga),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(procedureSagas);\n\nimport { takeEvery, put, call, select } from 'redux-saga/effects';\nimport { setFormErrors } from '../store/form';\nimport { ADD_STEP_REQUEST, ADD_STEP_REQUEST__SUCCESS, ADD_STEP_REQUEST__FAILURE } from '../store/procedure';\nimport { addImage } from '../store/image';\n\nvar getFormValues = function getFormValues(_ref) {\n  var form = _ref.form;\n  return form;\n};\n\nfunction readAsDataURL(blob) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      return resolve(e.target.result);\n    };\n\n    reader.onerror = reject;\n    reader.readAsDataURL(blob);\n  });\n}\n\nfunction createStepSaga(_ref2) {\n  var payload, _ref3, step, image;\n\n  return _regeneratorRuntime.wrap(function createStepSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = _ref2.payload;\n          _context.prev = 1;\n          _context.next = 4;\n          return select(getFormValues);\n\n        case 4:\n          _ref3 = _context.sent;\n          step = _ref3.step;\n          console.log(\"step\", step);\n\n          if (step.values.title) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.next = 10;\n          return put(setFormErrors({\n            form: 'step',\n            inputErrors: {\n              title: true\n            }\n          }));\n\n        case 10:\n          _context.next = 22;\n          break;\n\n        case 12:\n          _context.next = 14;\n          return put({\n            type: ADD_STEP_REQUEST__SUCCESS,\n            payload: {\n              step: step.values\n            }\n          });\n\n        case 14:\n          console.log(\"HERE WE GO\");\n\n          if (!step.values.image) {\n            _context.next = 22;\n            break;\n          }\n\n          _context.next = 18;\n          return call(readAsDataURL, step.values.image);\n\n        case 18:\n          image = _context.sent;\n          console.log(\"IMAGE\", image);\n          _context.next = 22;\n          return put(addImage(image));\n\n        case 22:\n          _context.next = 27;\n          break;\n\n        case 24:\n          _context.prev = 24;\n          _context.t0 = _context[\"catch\"](1);\n          console.log(\"ERROR\", _context.t0);\n\n        case 27:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 24]]);\n}\n\nexport default function procedureSagas() {\n  return _regeneratorRuntime.wrap(function procedureSagas$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(ADD_STEP_REQUEST, createStepSaga);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}","map":{"version":3,"sources":["C:\\Users\\Jake\\Documents\\Repositories\\parlaty\\app\\javascript\\src\\sagas\\procedure.js"],"names":["createStepSaga","procedureSagas","takeEvery","put","call","select","setFormErrors","ADD_STEP_REQUEST","ADD_STEP_REQUEST__SUCCESS","ADD_STEP_REQUEST__FAILURE","addImage","getFormValues","form","readAsDataURL","blob","Promise","resolve","reject","reader","FileReader","onload","e","target","result","onerror","payload","step","console","log","values","title","inputErrors","type","image"],"mappings":";;;;yBAoBUA,c;;;yBAoBeC,c;;AAxCzB,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,MAA/B,QAA6C,oBAA7C;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SACEC,gBADF,EAEEC,yBAFF,EAGEC,yBAHF,QAIO,oBAJP;AAKA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAEC,IAAF,QAAEA,IAAF;AAAA,SAAYA,IAAZ;AAAA,CAAtB;;AAEA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,MAAM,GAAI,IAAIC,UAAJ,EAAhB;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,UAACC,CAAD;AAAA,aAAOL,OAAO,CAACK,CAAC,CAACC,MAAF,CAASC,MAAV,CAAd;AAAA,KAAhB;;AACAL,IAAAA,MAAM,CAACM,OAAP,GAAiBP,MAAjB;AACAC,IAAAA,MAAM,CAACL,aAAP,CAAqBC,IAArB;AACD,GALM,CAAP;AAMD;;AAED,SAAUd,cAAV;AAAA;;AAAA;AAAA;AAAA;AAAA;AAA0ByB,UAAAA,OAA1B,SAA0BA,OAA1B;AAAA;AAAA;AAEmB,iBAAMpB,MAAM,CAACM,aAAD,CAAZ;;AAFnB;AAAA;AAEUe,UAAAA,IAFV,SAEUA,IAFV;AAGIC,UAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;;AAHJ,cAIQA,IAAI,CAACG,MAAL,CAAYC,KAJpB;AAAA;AAAA;AAAA;;AAAA;AAKM,iBAAM3B,GAAG,CAACG,aAAa,CAAC;AAACM,YAAAA,IAAI,EAAE,MAAP;AAAemB,YAAAA,WAAW,EAAE;AAACD,cAAAA,KAAK,EAAE;AAAR;AAA5B,WAAD,CAAd,CAAT;;AALN;AAAA;AAAA;;AAAA;AAAA;AAOM,iBAAM3B,GAAG,CAAC;AAAC6B,YAAAA,IAAI,EAAExB,yBAAP;AAAkCiB,YAAAA,OAAO,EAAE;AAACC,cAAAA,IAAI,EAAEA,IAAI,CAACG;AAAZ;AAA3C,WAAD,CAAT;;AAPN;AAQMF,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AARN,eASSF,IAAI,CAACG,MAAL,CAAYI,KATrB;AAAA;AAAA;AAAA;;AAAA;AAUsB,iBAAM7B,IAAI,CAACS,aAAD,EAAgBa,IAAI,CAACG,MAAL,CAAYI,KAA5B,CAAV;;AAVtB;AAUcA,UAAAA,KAVd;AAWQN,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBK,KAArB;AAXR;AAYQ,iBAAM9B,GAAG,CAACO,QAAQ,CAACuB,KAAD,CAAT,CAAT;;AAZR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiBIN,UAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,eAAe,SAAU3B,cAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,SAAS,CAACK,gBAAD,EAAmBP,cAAnB,CAAf;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { takeEvery, put, call, select } from 'redux-saga/effects';\r\nimport { setFormErrors } from '../store/form';\r\nimport {\r\n  ADD_STEP_REQUEST,\r\n  ADD_STEP_REQUEST__SUCCESS,\r\n  ADD_STEP_REQUEST__FAILURE\r\n} from '../store/procedure';\r\nimport { addImage } from '../store/image';\r\n\r\nconst getFormValues = ({form}) => form\r\n\r\nfunction readAsDataURL(blob) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader  = new FileReader();\r\n    reader.onload = (e) => resolve(e.target.result)\r\n    reader.onerror = reject\r\n    reader.readAsDataURL(blob)\r\n  })\r\n}\r\n\r\nfunction* createStepSaga({payload}){\r\n  try {\r\n    let { step } = yield select(getFormValues);\r\n    console.log(\"step\", step);\r\n    if(!step.values.title){\r\n      yield put(setFormErrors({form: 'step', inputErrors: {title: true}}))\r\n    } else {\r\n      yield put({type: ADD_STEP_REQUEST__SUCCESS, payload: {step: step.values}})\r\n      console.log(\"HERE WE GO\");\r\n      if(step.values.image){\r\n        const image = yield call(readAsDataURL, step.values.image)\r\n        console.log(\"IMAGE\", image);\r\n        yield put(addImage(image));\r\n      }\r\n    }\r\n\r\n  } catch (e) {\r\n    console.log(\"ERROR\", e);\r\n  }\r\n}\r\nexport default function* procedureSagas() {\r\n  yield takeEvery(ADD_STEP_REQUEST, createStepSaga);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}